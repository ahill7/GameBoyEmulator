#ifndef ISA_H_
#define ISA_H_

#include <iostream>
#include <string>


#include "../include/alu.hpp"
#include "../include/memory.hpp"
#include "../include/register.hpp"
#include "../include/loader.hpp"
#include "../include/cpu.hpp"

/*
CITATIONS
Overall instruction set follows from Cturt's Cinoop gameboy emulator written in C found here:
https://cturt.github.io/cinoop.html

All function headers are from the official gameboy manual.
*/


class ISA{
public:
  ISA();
  virtual~ISA();

  static void nop();
  static void ld_bc_nn(uint16_t operand);
  static void ld_bcp_a();
  static void inc_bc();
  static void inc_b();
  static void dec_b();
  static void ld_b_n(uint8_t operand);
  static void rlca();
  static void ld_nnp_sp(uint16_t operand);
  static void add_hl_bc();
  static void ld_a_bcp();
  static void dec_bc();
  static void inc_c();
  static void dec_c();
  static void ld_c_n(uint8_t operand);
  static void rrca();
  static void stop(uint8_t operand);
  static void ld_de_nn(uint16_t operand);
  static void ld_dep_a();
  static void inc_de();
  static void inc_d();
  static void dec_d();
  static void ld_d_n(uint8_t operand);
  static void rla();
  static void jr_n(uint8_t operand);
  static void add_hl_de();
  static void ld_a_dep();
  static void dec_de();
  static void inc_e();
  static void dec_e();
  static void ld_e_n(uint8_t operand);
  static void rra();
  static void jr_nz_n(uint8_t operand);
  static void ld_hl_nn(uint16_t operand);
  static void ldi_hlp_a();
  static void inc_hl();
  static void inc_h();
  static void dec_h();
  static void ld_h_n(uint8_t operand);
  static void daa();
  static void jr_z_n(uint8_t operand);
  static void add_hl_hl();
  static void ldi_a_hlp();
  static void dec_hl();
  static void inc_l();
  static void dec_l();
  static void ld_l_n(uint8_t operand);
  static void cpl();
  static void jr_nc_n(uint8_t operand);
  static void ld_sp_nn(uint16_t operand);
  static void ldd_hlp_a();
  static void inc_sp();
  static void inc_hlp();
  static void dec_hlp();
  static void ld_hlp_n(uint8_t operand);
  static void scf();
  static void jr_c_n(uint8_t);
  static void add_hl_sp();
  static void ldd_a_hlp();
  static void dec_sp();
  static void inc_a();
  static void dec_a();
  static void ld_a_n(uint8_t operand);
  static void ccf();
  static void ld_b_c();
  static void ld_b_d();
  static void ld_b_e();
  static void ld_b_h();
  static void ld_b_l();
  static void ld_b_hlp();
  static void ld_b_a();
  static void ld_c_b();
  static void ld_c_d();
  static void ld_c_e();
  static void ld_c_h();
  static void ld_c_l();
  static void ld_c_hlp();
  static void ld_c_a();
  static void ld_d_b();
  static void ld_d_c();
  static void ld_d_e();
  static void ld_d_h();
  static void ld_d_l();
  static void ld_d_hlp();
  static void ld_d_a();
  static void ld_e_b();
  static void ld_e_c();
  static void ld_e_d();
  static void ld_e_h();
  static void ld_e_l();
  static void ld_e_hlp();
  static void ld_e_a();
  static void ld_h_b();
  static void ld_h_c();
  static void ld_h_d();
  static void ld_h_e();
  static void ld_h_l();
  static void ld_h_hlp();
  static void ld_h_a();
  static void ld_l_b();
  static void ld_l_c();
  static void ld_l_d();
  static void ld_l_e();
  static void ld_l_h();
  static void ld_l_hlp();
  static void ld_l_a();
  static void ld_hlp_b();
  static void ld_hlp_c();
  static void ld_hlp_d();
  static void ld_hlp_e();
  static void ld_hlp_h();
  static void ld_hlp_l();
  static void halt();
  static void ld_hlp_a();
  static void ld_a_b();
  static void ld_a_c();
  static void ld_a_d();
  static void ld_a_e();
  static void ld_a_h();
  static void ld_a_l();
  static void ld_a_hlp();
  static void add_a_b();
  static void add_a_c();
  static void add_a_d();
  static void add_a_e();
  static void add_a_h();
  static void add_a_l();
  static void add_a_hlp();
  static void add_a_a();
  static void adc_b();
  static void adc_c();
  static void adc_d();
  static void adc_e();
  static void adc_h();
  static void adc_l();
  static void adc_hlp();
  static void adc_a();
  static void sub_b();
  static void sub_c();
  static void sub_d();
  static void sub_e();
  static void sub_h();
  static void sub_l();
  static void sub_hlp();
  static void sub_a();
  static void sbc_b();
  static void sbc_c();
  static void sbc_d();
  static void sbc_e();
  static void sbc_h();
  static void sbc_l();
  static void sbc_hlp();
  static void sbc_a();
  static void and_b();
  static void and_c();
  static void and_d();
  static void and_e();
  static void and_h();
  static void and_l();
  static void and_hlp();
  static void and_a();
  static void xor_b();
  static void xor_c();
  static void xor_d();
  static void xor_e();
  static void xor_h();
  static void xor_l();
  static void xor_hlp();
  static void xor_a();
  static void or_b();
  static void or_c();
  static void or_d();
  static void or_e();
  static void or_h();
  static void or_l();
  static void or_hlp();
  static void or_a();
  static void cp_b();
  static void cp_c();
  static void cp_d();
  static void cp_e();
  static void cp_h();
  static void cp_l();
  static void cp_hlp();
  static void cp_a();
  static void ret_nz();
  static void pop_bc();
  static void jp_nz_nn(uint16_t operand);
  static void jp_nn(uint16_t operand);
  static void call_nz_nn(uint16_t operand);
  static void push_bc();
  static void add_a_n(uint8_t operand);
  static void rst_0();
  static void ret_z();
  static void ret();
  static void jp_z_nn(uint16_t operand);
  static void call_z_nn(uint16_t operand);
  static void call_nn(uint16_t operand);
  static void adc_n(uint8_t operand);
  static void rst_08();
  static void ret_nc();
  static void pop_de();
  static void jp_nc_nn(uint16_t operand);
  static void call_nc_nn(uint16_t operand);
  static void push_de();
  static void sub_n(uint8_t operand);
  static void rst_10();
  static void ret_c();
  static void sbc_n(uint8_t operand);
  static void rst_18();
  static void ld_ff_n_ap(uint8_t operand);
  static void pop_hl();
  static void ld_ff_c_a();
  static void push_hl();
  static void and_n(uint8_t operand);
  static void rst_20();
  static void add_sp_n(uint8_t operand);
  static void jp_hl();
  static void ld_nnp_a(uint16_t operand);
  static void xor_n(uint8_t operand);
  static void rst_28();
  static void ld_ff_ap_n(uint8_t operand);
  static void pop_af();
  static void ld_a_ff_c();
  static void di_inst();
  static void push_af();
  static void or_n(uint8_t operand);
  static void rst_30();
  static void ld_hl_sp_n(uint8_t operand);
  static void ld_sp_hl();
  static void ld_a_nnp(uint16_t operand);
  static void ei();
  static void cp_n(uint8_t operand);
  static void rst_38();
  static int check_z();
  static int check_c();
  static uint16_t pop();
  static void push(uint16_t pairReg);

  static void jp_c_nn(uint16_t operand);
  static void call_c_nn(uint16_t operand);
  static void reti();

  /* BEGIN EXTENDED INSTRUCTIONS */

  static void rlc_b();
  static void rlc_c();
  static void rlc_d();
  static void rlc_e();
  static void rlc_h();
  static void rlc_l();
  static void rlc_hlp();
  static void rlc_a();
  static void rrc_b();
  static void rrc_c();
  static void rrc_d();
  static void rrc_e();
  static void rrc_h();
  static void rrc_l();
  static void rrc_hlp();
  static void rrc_a();
  static void rl_b();
  static void rl_c();
  static void rl_d();
  static void rl_e();
  static void rl_h();
  static void rl_l();
  static void rl_hlp();
  static void rl_a();
  static void rr_b();
  static void rr_c();
  static void rr_d();
  static void rr_e();
  static void rr_h();
  static void rr_l();
  static void rr_hlp();
  static void rr_a();
  static void sla_b();
  static void sla_c();
  static void sla_d();
  static void sla_e();
  static void sla_h();
  static void sla_l();
  static void sla_hlp();
  static void sla_a();
  static void sra_b();
  static void sra_c();
  static void sra_d();
  static void sra_e();
  static void sra_h();
  static void sra_l();
  static void sra_hlp();
  static void sra_a();
  static void swap_b();
  static void swap_c();
  static void swap_d();
  static void swap_e();
  static void swap_h();
  static void swap_l();
  static void swap_hlp();
  static void swap_a();
  static void srl_b();
  static void srl_c();
  static void srl_d();
  static void srl_e();
  static void srl_h();
  static void srl_l();
  static void srl_hlp();
  static void srl_a();
  static void bit_0_b();
  static void bit_0_c();
  static void bit_0_d();
  static void bit_0_e();
  static void bit_0_h();
  static void bit_0_l();
  static void bit_0_hlp();
  static void bit_0_a();
  static void bit_1_b();
  static void bit_1_c();
  static void bit_1_d();
  static void bit_1_e();
  static void bit_1_h();
  static void bit_1_l();
  static void bit_1_hlp();
  static void bit_1_a();
  static void bit_2_b();
  static void bit_2_c();
  static void bit_2_d();
  static void bit_2_e();
  static void bit_2_h();
  static void bit_2_l();
  static void bit_2_hlp();
  static void bit_2_a();
  static void bit_3_b();
  static void bit_3_c();
  static void bit_3_d();
  static void bit_3_e();
  static void bit_3_h();
  static void bit_3_l();
  static void bit_3_hlp();
  static void bit_3_a();
  static void bit_4_b();
  static void bit_4_c();
  static void bit_4_d();
  static void bit_4_e();
  static void bit_4_h();
  static void bit_4_l();
  static void bit_4_hlp();
  static void bit_4_a();
  static void bit_5_b();
  static void bit_5_c();
  static void bit_5_d();
  static void bit_5_e();
  static void bit_5_h();
  static void bit_5_l();
  static void bit_5_hlp();
  static void bit_5_a();
  static void bit_6_b();
  static void bit_6_c();
  static void bit_6_d();
  static void bit_6_e();
  static void bit_6_h();
  static void bit_6_l();
  static void bit_6_hlp();
  static void bit_6_a();
  static void bit_7_b();
  static void bit_7_c();
  static void bit_7_d();
  static void bit_7_e();
  static void bit_7_h();
  static void bit_7_l();
  static void bit_7_hlp();
  static void bit_7_a();
  static void res_0_b();
  static void res_0_c();
  static void res_0_d();
  static void res_0_e();
  static void res_0_h();
  static void res_0_l();
  static void res_0_hlp();
  static void res_0_a();
  static void res_1_b();
  static void res_1_c();
  static void res_1_d();
  static void res_1_e();
  static void res_1_h();
  static void res_1_l();
  static void res_1_hlp();
  static void res_1_a();
  static void res_2_b();
  static void res_2_c();
  static void res_2_d();
  static void res_2_e();
  static void res_2_h();
  static void res_2_l();
  static void res_2_hlp();
  static void res_2_a();
  static void res_3_b();
  static void res_3_c();
  static void res_3_d();
  static void res_3_e();
  static void res_3_h();
  static void res_3_l();
  static void res_3_hlp();
  static void res_3_a();
  static void res_4_b();
  static void res_4_c();
  static void res_4_d();
  static void res_4_e();
  static void res_4_h();
  static void res_4_l();
  static void res_4_hlp();
  static void res_4_a();
  static void res_5_b();
  static void res_5_c();
  static void res_5_d();
  static void res_5_e();
  static void res_5_h();
  static void res_5_l();
  static void res_5_hlp();
  static void res_5_a();
  static void res_6_b();
  static void res_6_c();
  static void res_6_d();
  static void res_6_e();
  static void res_6_h();
  static void res_6_l();
  static void res_6_hlp();
  static void res_6_a();
  static void res_7_b();
  static void res_7_c();
  static void res_7_d();
  static void res_7_e();
  static void res_7_h();
  static void res_7_l();
  static void res_7_hlp();
  static void res_7_a();
  static void set_0_b();
  static void set_0_c();
  static void set_0_d();
  static void set_0_e();
  static void set_0_h();
  static void set_0_l();
  static void set_0_hlp();
  static void set_0_a();
  static void set_1_b();
  static void set_1_c();
  static void set_1_d();
  static void set_1_e();
  static void set_1_h();
  static void set_1_l();
  static void set_1_hlp();
  static void set_1_a();
  static void set_2_b();
  static void set_2_c();
  static void set_2_d();
  static void set_2_e();
  static void set_2_h();
  static void set_2_l();
  static void set_2_hlp();
  static void set_2_a();
  static void set_3_b();
  static void set_3_c();
  static void set_3_d();
  static void set_3_e();
  static void set_3_h();
  static void set_3_l();
  static void set_3_hlp();
  static void set_3_a();
  static void set_4_b();
  static void set_4_c();
  static void set_4_d();
  static void set_4_e();
  static void set_4_h();
  static void set_4_l();
  static void set_4_hlp();
  static void set_4_a();
  static void set_5_b();
  static void set_5_c();
  static void set_5_d();
  static void set_5_e();
  static void set_5_h();
  static void set_5_l();
  static void set_5_hlp();
  static void set_5_a();
  static void set_6_b();
  static void set_6_c();
  static void set_6_d();
  static void set_6_e();
  static void set_6_h();
  static void set_6_l();
  static void set_6_hlp();
  static void set_6_a();
  static void set_7_b();
  static void set_7_c();
  static void set_7_d();
  static void set_7_e();
  static void set_7_h();
  static void set_7_l();
  static void set_7_hlp();
  static void set_7_a();

  static int master_enable;

  static void handle_interrupts();

  static void vblank_interrupt();
  static void lcd_interrupt();
  static void timer_interrupt();
  static void serial_interrupt();
  static void joypad_interrupt();
private:
  static uint16_t swap_bytes(uint16_t n);

};


#endif
